name: Lint, check formatting, and build and publish Docker image

on:
  push:
  pull_request:

permissions: {}

jobs:
  lint:
    permissions:
      contents: read

    runs-on: ubuntu-latest

    steps:
      - name: Check out repo
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Install dependencies
        run: |
          pipx install poetry==1.8.5
          poetry install --no-root --with=dev

      - name: Lint code with Ruff
        run: poetry run ruff check --output-format=github check_xmpp_dns.py

      - name: Check code formatting with Ruff
        run: poetry run ruff format --diff check_xmpp_dns.py

  build-and-push-docker-image:
    # This job was copied from https://docs.github.com/en/actions/use-cases-and-examples/publishing-packages/publishing-docker-images#publishing-images-to-github-packages
    # See that page for updates and more details.

    needs: lint

    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write

    runs-on: ubuntu-latest

    env:
      REGISTRY: ghcr.io
      IMAGE_NAME: ${{ github.repository }}
      SHOULD_PUSH: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}

    steps:
      - name: Check out repo
        uses: actions/checkout@v4

      # Log in to the container registry using the account and password that will publish the
      # packages. Once published, the packages are scoped to the account defined here.
      # For more info see https://github.com/docker/login-action
      - name: Log in to the container registry
        uses: docker/login-action@7ca345011ac4304463197fac0e56eab1bc7e6af0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Extract tags and labels and save in the "meta" id.
      # The `images` value provides the base name for the tags and labels.
      # For more info see https://github.com/docker/metadata-action
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@906ecf0fc0a80f9110f79d9e6c04b1080f4a2621
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      # Build the image using the repo's Dockerfile and push to the registry.
      # For more info see https://github.com/docker/build-push-action
      - name: Build Docker image. Push to registry if building the branch "main"
        id: push
        uses: docker/build-push-action@f2a1d5e99d037542a71f64918e516c093c6f3fc4
        with:
          context: .
          push: ${{ env.SHOULD_PUSH }}
          # "steps.meta" refers to the fields from the extract step above.
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

        # Generate an artifact attestation for the image, which is an unforgeable statement about
        # where and how it was built. It increases supply chain security for people who consume the
        # image.
        # For more info see https://docs.github.com/en/actions/security-for-github-actions/using-artifact-attestations
      - name: Generate artifact attestation
        if: ${{ env.SHOULD_PUSH == 'true' }}
        uses: actions/attest-build-provenance@v2
        with:
          subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME}}
          subject-digest: ${{ steps.push.outputs.digest }}
          push-to-registry: true
